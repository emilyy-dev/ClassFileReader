package io.github.emilyydev.classreader.bytecode

import io.github.emilyydev.classreader.constantpool.ConstantPool

import java.io.Writer
import java.nio.ByteBuffer

trait Instruction {

  val mnemonic: String

  def render(codeBuffer: ByteBuffer, constantPool: ConstantPool, writer: Writer): Unit =
    writer.write(mnemonic)

  def whitespacePadded: String = Instruction.whitespacePadded(mnemonic)
}

//noinspection SpellCheckingInspection
object Instruction {

  val nop: Byte = 0x00
  val aconst_null: Byte = 0x01
  val iconst_m1: Byte = 0x02
  val iconst_0: Byte = 0x03
  val iconst_1: Byte = 0x04
  val iconst_2: Byte = 0x05
  val iconst_3: Byte = 0x06
  val iconst_4: Byte = 0x07
  val iconst_5: Byte = 0x08
  val lconst_0: Byte = 0x09
  val lconst_1: Byte = 0x0a
  val fconst_0: Byte = 0x0b
  val fconst_1: Byte = 0x0c
  val fconst_2: Byte = 0x0d
  val dconst_0: Byte = 0x0e
  val dconst_1: Byte = 0x0f
  val bipush: Byte = 0x10
  val sipush: Byte = 0x11
  val ldc: Byte = 0x12
  val ldc_w: Byte = 0x13
  val ldc2_w: Byte = 0x14
  val iload: Byte = 0x15
  val lload: Byte = 0x16
  val fload: Byte = 0x17
  val dload: Byte = 0x18
  val aload: Byte = 0x19
  val iload_0: Byte = 0x1a
  val iload_1: Byte = 0x1b
  val iload_2: Byte = 0x1c
  val iload_3: Byte = 0x1d
  val lload_0: Byte = 0x1e
  val lload_1: Byte = 0x1f
  val lload_2: Byte = 0x20
  val lload_3: Byte = 0x21
  val fload_0: Byte = 0x22
  val fload_1: Byte = 0x23
  val fload_2: Byte = 0x24
  val fload_3: Byte = 0x25
  val dload_0: Byte = 0x26
  val dload_1: Byte = 0x27
  val dload_2: Byte = 0x28
  val dload_3: Byte = 0x29
  val aload_0: Byte = 0x2a
  val aload_1: Byte = 0x2b
  val aload_2: Byte = 0x2c
  val aload_3: Byte = 0x2d
  val iaload: Byte = 0x2e
  val laload: Byte = 0x2f
  val faload: Byte = 0x30
  val daload: Byte = 0x31
  val aaload: Byte = 0x32
  val baload: Byte = 0x33
  val caload: Byte = 0x34
  val saload: Byte = 0x35
  val istore: Byte = 0x36
  val lstore: Byte = 0x37
  val fstore: Byte = 0x38
  val dstore: Byte = 0x39
  val astore: Byte = 0x3a
  val istore_0: Byte = 0x3b
  val istore_1: Byte = 0x3c
  val istore_2: Byte = 0x3d
  val istore_3: Byte = 0x3e
  val lstore_0: Byte = 0x3f
  val lstore_1: Byte = 0x40
  val lstore_2: Byte = 0x41
  val lstore_3: Byte = 0x42
  val fstore_0: Byte = 0x43
  val fstore_1: Byte = 0x44
  val fstore_2: Byte = 0x45
  val fstore_3: Byte = 0x46
  val dstore_0: Byte = 0x47
  val dstore_1: Byte = 0x48
  val dstore_2: Byte = 0x49
  val dstore_3: Byte = 0x4a
  val astore_0: Byte = 0x4b
  val astore_1: Byte = 0x4c
  val astore_2: Byte = 0x4d
  val astore_3: Byte = 0x4e
  val iastore: Byte = 0x4f
  val lastore: Byte = 0x50
  val fastore: Byte = 0x51
  val dastore: Byte = 0x52
  val aastore: Byte = 0x53
  val bastore: Byte = 0x54
  val castore: Byte = 0x55
  val sastore: Byte = 0x56
  val pop: Byte = 0x57
  val pop2: Byte = 0x58
  val dup: Byte = 0x59
  val dup_x1: Byte = 0x5a
  val dup_x2: Byte = 0x5b
  val dup2: Byte = 0x5c
  val dup2_x1: Byte = 0x5d
  val dup2_x2: Byte = 0x5e
  val swap: Byte = 0x5f
  val iadd: Byte = 0x60
  val ladd: Byte = 0x61
  val fadd: Byte = 0x62
  val dadd: Byte = 0x63
  val isub: Byte = 0x64
  val lsub: Byte = 0x65
  val fsub: Byte = 0x66
  val dsub: Byte = 0x67
  val imul: Byte = 0x68
  val lmul: Byte = 0x69
  val fmul: Byte = 0x6a
  val dmul: Byte = 0x6b
  val idiv: Byte = 0x6c
  val ldiv: Byte = 0x6d
  val fdiv: Byte = 0x6e
  val ddiv: Byte = 0x6f
  val irem: Byte = 0x70
  val lrem: Byte = 0x71
  val frem: Byte = 0x72
  val drem: Byte = 0x73
  val ineg: Byte = 0x74
  val lneg: Byte = 0x75
  val fneg: Byte = 0x76
  val dneg: Byte = 0x77
  val ishl: Byte = 0x78
  val lshl: Byte = 0x79
  val ishr: Byte = 0x7a
  val lshr: Byte = 0x7b
  val iushr: Byte = 0x7c
  val lushr: Byte = 0x7d
  val iand: Byte = 0x7e
  val land: Byte = 0x7f
  val ior: Byte = 0x80.asInstanceOf[Byte]
  val lor: Byte = 0x81.asInstanceOf[Byte]
  val ixor: Byte = 0x82.asInstanceOf[Byte]
  val lxor: Byte = 0x83.asInstanceOf[Byte]
  val iinc: Byte = 0x84.asInstanceOf[Byte]
  val i2l: Byte = 0x85.asInstanceOf[Byte]
  val i2f: Byte = 0x86.asInstanceOf[Byte]
  val i2d: Byte = 0x87.asInstanceOf[Byte]
  val l2i: Byte = 0x88.asInstanceOf[Byte]
  val l2f: Byte = 0x89.asInstanceOf[Byte]
  val l2d: Byte = 0x8a.asInstanceOf[Byte]
  val f2i: Byte = 0x8b.asInstanceOf[Byte]
  val f2l: Byte = 0x8c.asInstanceOf[Byte]
  val f2d: Byte = 0x8d.asInstanceOf[Byte]
  val d2i: Byte = 0x8e.asInstanceOf[Byte]
  val d2l: Byte = 0x8f.asInstanceOf[Byte]
  val d2f: Byte = 0x90.asInstanceOf[Byte]
  val i2b: Byte = 0x91.asInstanceOf[Byte]
  val i2c: Byte = 0x92.asInstanceOf[Byte]
  val i2s: Byte = 0x93.asInstanceOf[Byte]
  val lcmp: Byte = 0x94.asInstanceOf[Byte]
  val fcmpl: Byte = 0x95.asInstanceOf[Byte]
  val fcmpg: Byte = 0x96.asInstanceOf[Byte]
  val dcmpl: Byte = 0x97.asInstanceOf[Byte]
  val dcmpg: Byte = 0x98.asInstanceOf[Byte]
  val ifeq: Byte = 0x99.asInstanceOf[Byte]
  val ifne: Byte = 0x9a.asInstanceOf[Byte]
  val iflt: Byte = 0x9b.asInstanceOf[Byte]
  val ifge: Byte = 0x9c.asInstanceOf[Byte]
  val ifgt: Byte = 0x9d.asInstanceOf[Byte]
  val ifle: Byte = 0x9e.asInstanceOf[Byte]
  val if_icmpeq: Byte = 0x9f.asInstanceOf[Byte]
  val if_icmpne: Byte = 0xa0.asInstanceOf[Byte]
  val if_icmplt: Byte = 0xa1.asInstanceOf[Byte]
  val if_icmpge: Byte = 0xa2.asInstanceOf[Byte]
  val if_icmpgt: Byte = 0xa3.asInstanceOf[Byte]
  val if_icmple: Byte = 0xa4.asInstanceOf[Byte]
  val if_acmpeq: Byte = 0xa5.asInstanceOf[Byte]
  val if_acmpne: Byte = 0xa6.asInstanceOf[Byte]
  val goto: Byte = 0xa7.asInstanceOf[Byte]
  val jsr: Byte = 0xa8.asInstanceOf[Byte]
  val ret: Byte = 0xa9.asInstanceOf[Byte]
  val tableswitch: Byte = 0xaa.asInstanceOf[Byte]
  val lookupswitch: Byte = 0xab.asInstanceOf[Byte]
  val ireturn: Byte = 0xac.asInstanceOf[Byte]
  val lreturn: Byte = 0xad.asInstanceOf[Byte]
  val freturn: Byte = 0xae.asInstanceOf[Byte]
  val dreturn: Byte = 0xaf.asInstanceOf[Byte]
  val areturn: Byte = 0xb0.asInstanceOf[Byte]
  val `return`: Byte = 0xb1.asInstanceOf[Byte]
  val getstatic: Byte = 0xb2.asInstanceOf[Byte]
  val putstatic: Byte = 0xb3.asInstanceOf[Byte]
  val getfield: Byte = 0xb4.asInstanceOf[Byte]
  val putfield: Byte = 0xb5.asInstanceOf[Byte]
  val invokevirtual: Byte = 0xb6.asInstanceOf[Byte]
  val invokespecial: Byte = 0xb7.asInstanceOf[Byte]
  val invokestatic: Byte = 0xb8.asInstanceOf[Byte]
  val invokeinterface: Byte = 0xb9.asInstanceOf[Byte]
  val invokedynamic: Byte = 0xba.asInstanceOf[Byte]
  val `new`: Byte = 0xbb.asInstanceOf[Byte]
  val newarray: Byte = 0xbc.asInstanceOf[Byte]
  val anewarray: Byte = 0xbd.asInstanceOf[Byte]
  val arraylength: Byte = 0xbe.asInstanceOf[Byte]
  val athrow: Byte = 0xbf.asInstanceOf[Byte]
  val checkcast: Byte = 0xc0.asInstanceOf[Byte]
  val instanceof: Byte = 0xc1.asInstanceOf[Byte]
  val monitorenter: Byte = 0xc2.asInstanceOf[Byte]
  val monitorexit: Byte = 0xc3.asInstanceOf[Byte]
  val wide: Byte = 0xc4.asInstanceOf[Byte]
  val multianewarray: Byte = 0xc5.asInstanceOf[Byte]
  val ifnull: Byte = 0xc6.asInstanceOf[Byte]
  val ifnonnull: Byte = 0xc7.asInstanceOf[Byte]
  val goto_w: Byte = 0xc8.asInstanceOf[Byte]
  val jsr_w: Byte = 0xc9.asInstanceOf[Byte]
  /*
    val breakpoint: Byte = 0xca.asInstanceOf[Byte]
    val _: Byte = 0xcb.asInstanceOf[Byte]
    val _: Byte = 0xcc.asInstanceOf[Byte]
    val _: Byte = 0xcd.asInstanceOf[Byte]
    val _: Byte = 0xce.asInstanceOf[Byte]
    val _: Byte = 0xcf.asInstanceOf[Byte]
    val _: Byte = 0xd0.asInstanceOf[Byte]
    val _: Byte = 0xd1.asInstanceOf[Byte]
    val _: Byte = 0xd2.asInstanceOf[Byte]
    val _: Byte = 0xd3.asInstanceOf[Byte]
    val _: Byte = 0xd4.asInstanceOf[Byte]
    val _: Byte = 0xd5.asInstanceOf[Byte]
    val _: Byte = 0xd6.asInstanceOf[Byte]
    val _: Byte = 0xd7.asInstanceOf[Byte]
    val _: Byte = 0xd8.asInstanceOf[Byte]
    val _: Byte = 0xd9.asInstanceOf[Byte]
    val _: Byte = 0xda.asInstanceOf[Byte]
    val _: Byte = 0xdb.asInstanceOf[Byte]
    val _: Byte = 0xdc.asInstanceOf[Byte]
    val _: Byte = 0xdd.asInstanceOf[Byte]
    val _: Byte = 0xde.asInstanceOf[Byte]
    val _: Byte = 0xdf.asInstanceOf[Byte]
    val _: Byte = 0xe0.asInstanceOf[Byte]
    val _: Byte = 0xe1.asInstanceOf[Byte]
    val _: Byte = 0xe2.asInstanceOf[Byte]
    val _: Byte = 0xe3.asInstanceOf[Byte]
    val _: Byte = 0xe4.asInstanceOf[Byte]
    val _: Byte = 0xe5.asInstanceOf[Byte]
    val _: Byte = 0xe6.asInstanceOf[Byte]
    val _: Byte = 0xe7.asInstanceOf[Byte]
    val _: Byte = 0xe8.asInstanceOf[Byte]
    val _: Byte = 0xe9.asInstanceOf[Byte]
    val _: Byte = 0xea.asInstanceOf[Byte]
    val _: Byte = 0xeb.asInstanceOf[Byte]
    val _: Byte = 0xec.asInstanceOf[Byte]
    val _: Byte = 0xed.asInstanceOf[Byte]
    val _: Byte = 0xee.asInstanceOf[Byte]
    val _: Byte = 0xef.asInstanceOf[Byte]
    val _: Byte = 0xf0.asInstanceOf[Byte]
    val _: Byte = 0xf1.asInstanceOf[Byte]
    val _: Byte = 0xf2.asInstanceOf[Byte]
    val _: Byte = 0xf3.asInstanceOf[Byte]
    val _: Byte = 0xf4.asInstanceOf[Byte]
    val _: Byte = 0xf5.asInstanceOf[Byte]
    val _: Byte = 0xf6.asInstanceOf[Byte]
    val _: Byte = 0xf7.asInstanceOf[Byte]
    val _: Byte = 0xf8.asInstanceOf[Byte]
    val _: Byte = 0xf9.asInstanceOf[Byte]
    val _: Byte = 0xfa.asInstanceOf[Byte]
    val _: Byte = 0xfb.asInstanceOf[Byte]
    val _: Byte = 0xfc.asInstanceOf[Byte]
    val _: Byte = 0xfd.asInstanceOf[Byte]
    val impdep1: Byte = 0xfe.asInstanceOf[Byte]
    val impdep2: Byte = 0xff.asInstanceOf[Byte]
  */

  val InstructionMap: Map[Byte, Instruction] = {
    val builder = Map.newBuilder[Byte, Instruction]
    builder += nop -> NOP
    builder += aconst_null -> ACONST_NULL
    builder += iconst_m1 -> ICONST_M1
    builder += iconst_0 -> ICONST_0
    builder += iconst_1 -> ICONST_1
    builder += iconst_2 -> ICONST_2
    builder += iconst_3 -> ICONST_3
    builder += iconst_4 -> ICONST_4
    builder += iconst_5 -> ICONST_5
    builder += lconst_0 -> LCONST_0
    builder += lconst_1 -> LCONST_1
    builder += fconst_0 -> FCONST_0
    builder += fconst_1 -> FCONST_1
    builder += fconst_2 -> FCONST_2
    builder += dconst_0 -> DCONST_0
    builder += dconst_1 -> DCONST_1
    builder += bipush -> BIPUSH
    builder += sipush -> SIPUSH
    builder += ldc -> LDC
    builder += ldc_w -> LDC_W
    builder += ldc2_w -> LDC2_W
    builder += iload -> ILOAD
    builder += lload -> LLOAD
    builder += fload -> FLOAD
    builder += dload -> DLOAD
    builder += aload -> ALOAD
    builder += iload_0 -> ILOAD_0
    builder += iload_1 -> ILOAD_1
    builder += iload_2 -> ILOAD_2
    builder += iload_3 -> ILOAD_3
    builder += lload_0 -> LLOAD_0
    builder += lload_1 -> LLOAD_1
    builder += lload_2 -> LLOAD_2
    builder += lload_3 -> LLOAD_3
    builder += fload_0 -> FLOAD_0
    builder += fload_1 -> FLOAD_1
    builder += fload_2 -> FLOAD_2
    builder += fload_3 -> FLOAD_3
    builder += dload_0 -> DLOAD_0
    builder += dload_1 -> DLOAD_1
    builder += dload_2 -> DLOAD_2
    builder += dload_3 -> DLOAD_3
    builder += aload_0 -> ALOAD_0
    builder += aload_1 -> ALOAD_1
    builder += aload_2 -> ALOAD_2
    builder += aload_3 -> ALOAD_3
    builder += iaload -> IALOAD
    builder += laload -> LALOAD
    builder += faload -> FALOAD
    builder += daload -> DALOAD
    builder += aaload -> AALOAD
    builder += baload -> BALOAD
    builder += caload -> CALOAD
    builder += saload -> SALOAD
    builder += istore -> ISTORE
    builder += lstore -> LSTORE
    builder += fstore -> FSTORE
    builder += dstore -> DSTORE
    builder += astore -> ASTORE
    builder += istore_0 -> ISTORE_0
    builder += istore_1 -> ISTORE_1
    builder += istore_2 -> ISTORE_2
    builder += istore_3 -> ISTORE_3
    builder += lstore_0 -> LSTORE_0
    builder += lstore_1 -> LSTORE_1
    builder += lstore_2 -> LSTORE_2
    builder += lstore_3 -> LSTORE_3
    builder += fstore_0 -> FSTORE_0
    builder += fstore_1 -> FSTORE_1
    builder += fstore_2 -> FSTORE_2
    builder += fstore_3 -> FSTORE_3
    builder += dstore_0 -> DSTORE_0
    builder += dstore_1 -> DSTORE_1
    builder += dstore_2 -> DSTORE_2
    builder += dstore_3 -> DSTORE_3
    builder += astore_0 -> ASTORE_0
    builder += astore_1 -> ASTORE_1
    builder += astore_2 -> ASTORE_2
    builder += astore_3 -> ASTORE_3
    builder += iastore -> IASTORE
    builder += lastore -> LASTORE
    builder += fastore -> FASTORE
    builder += dastore -> DASTORE
    builder += aastore -> AASTORE
    builder += bastore -> BASTORE
    builder += castore -> CASTORE
    builder += sastore -> SASTORE
    builder += pop -> POP
    builder += pop2 -> POP2
    builder += dup -> DUP
    builder += dup_x1 -> DUP_X1
    builder += dup_x2 -> DUP_X2
    builder += dup2 -> DUP2
    builder += dup2_x1 -> DUP2_X1
    builder += dup2_x2 -> DUP2_X2
    builder += swap -> SWAP
    builder += iadd -> IADD
    builder += ladd -> LADD
    builder += fadd -> FADD
    builder += dadd -> DADD
    builder += isub -> ISUB
    builder += lsub -> LSUB
    builder += fsub -> FSUB
    builder += dsub -> DSUB
    builder += imul -> IMUL
    builder += lmul -> LMUL
    builder += fmul -> FMUL
    builder += dmul -> DMUL
    builder += idiv -> IDIV
    builder += ldiv -> LDIV
    builder += fdiv -> FDIV
    builder += ddiv -> DDIV
    builder += irem -> IREM
    builder += lrem -> LREM
    builder += frem -> FREM
    builder += drem -> DREM
    builder += ineg -> INEG
    builder += lneg -> LNEG
    builder += fneg -> FNEG
    builder += dneg -> DNEG
    builder += ishl -> ISHL
    builder += lshl -> LSHL
    builder += ishr -> ISHR
    builder += lshr -> LSHR
    builder += iushr -> IUSHR
    builder += lushr -> LUSHR
    builder += iand -> IAND
    builder += land -> LAND
    builder += ior -> IOR
    builder += lor -> LOR
    builder += ixor -> IXOR
    builder += lxor -> LXOR
    builder += iinc -> IINC
    builder += i2l -> I2L
    builder += i2f -> I2F
    builder += i2d -> I2D
    builder += l2i -> L2I
    builder += l2f -> L2F
    builder += l2d -> L2D
    builder += f2i -> F2I
    builder += f2l -> F2L
    builder += f2d -> F2D
    builder += d2i -> D2I
    builder += d2l -> D2L
    builder += d2f -> D2F
    builder += i2b -> I2B
    builder += i2c -> I2C
    builder += i2s -> I2S
    builder += lcmp -> LCMP
    builder += fcmpl -> FCMPL
    builder += fcmpg -> FCMPG
    builder += dcmpl -> DCMPL
    builder += dcmpg -> DCMPG
    builder += ifeq -> IFEQ
    builder += ifne -> IFNE
    builder += iflt -> IFLT
    builder += ifge -> IFGE
    builder += ifgt -> IFGT
    builder += ifle -> IFLE
    builder += if_icmpeq -> IF_ICMPEQ
    builder += if_icmpne -> IF_ICMPNE
    builder += if_icmplt -> IF_ICMPLT
    builder += if_icmpge -> IF_ICMPGE
    builder += if_icmpgt -> IF_ICMPGT
    builder += if_icmple -> IF_ICMPLE
    builder += if_acmpeq -> IF_ACMPEQ
    builder += if_acmpne -> IF_ACMPNE
    builder += goto -> GOTO
    builder += jsr -> JSR
    builder += ret -> RET
    builder += tableswitch -> TABLESWITCH
    builder += lookupswitch -> LOOKUPSWITCH
    builder += ireturn -> IRETURN
    builder += lreturn -> LRETURN
    builder += freturn -> FRETURN
    builder += dreturn -> DRETURN
    builder += areturn -> ARETURN
    builder += `return` -> RETURN
    builder += getstatic -> GETSTATIC
    builder += putstatic -> PUTSTATIC
    builder += getfield -> GETFIELD
    builder += putfield -> PUTFIELD
    builder += invokevirtual -> INVOKEVIRTUAL
    builder += invokespecial -> INVOKESPECIAL
    builder += invokestatic -> INVOKESTATIC
    builder += invokeinterface -> INVOKEINTERFACE
    builder += invokedynamic -> INVOKEDYNAMIC
    builder += `new` -> NEW
    builder += newarray -> NEWARRAY
    builder += anewarray -> ANEWARRAY
    builder += arraylength -> ARRAYLENGTH
    builder += athrow -> ATHROW
    builder += checkcast -> CHECKCAST
    builder += instanceof -> INSTANCEOF
    builder += monitorenter -> MONITORENTER
    builder += monitorexit -> MONITOREXIT
    builder += wide -> WIDE
    builder += multianewarray -> MULTIANEWARRAY
    builder += ifnull -> IFNULL
    builder += ifnonnull -> IFNONNULL
    builder += goto_w -> GOTO_W
    builder += jsr_w -> JSR_W
    builder.result()
  }

  private val LongestMnemonicLength = InstructionMap.values.map(_.mnemonic).map(_.length).max
  private val WhitespacePaddedFormat = s"%-${LongestMnemonicLength}s"

  def whitespacePadded(mnemonic: String): String = WhitespacePaddedFormat.format(mnemonic)
}
